{"version":3,"sources":["../src/index.js"],"names":["defaultConvertOptions","fontFamilies","convertRawToHTML","rawContent","options","contentState","error","console","warn","convertHTMLToRaw","HTMLString","source","log","convertEditorStateToHTML","editorState","getCurrentContent","convertHTMLToEditorState","editorDecorators","createWithContent","createEmpty","convertEditorStateToRaw","convertRawToEditorState"],"mappings":";;;;;;;;;AAAA;;AAMA;;AACA;;AACA;;AAEA,IAAMA,wBAAwB;AAC5BC;AAD4B,CAA9B;;AAIO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAAaC,OAAb,EAAyB;AACvDA,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,QAAMC,eAAe,6BAAeF,UAAf,CAArB;AACAC,YAAQC,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA,WAAO,oCAAYA,YAAZ,EAA0B,8BAAgBD,OAAhB,CAA1B,CAAP;AACD,GAND,CAME,OAAOE,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,EAAP;AACD;AACF,CAbM;;AAeA,IAAMG,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAAaN,OAAb,EAAsBO,MAAtB,EAAiC;AAC/DP,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACFG,YAAQK,GAAR,CAAY,gCAAkBR,OAAlB,CAAZ;;AAEA,QAAMC,eAAe,sCAAcK,UAAd,EAA0B,gCAAkBN,OAAlB,CAA1B,CAArB;;AAEA,WAAO,2BAAaC,YAAb,CAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,EAAP;AACD;AACF,CAbM;;AAeA,IAAMO,8DAA2B,SAA3BA,wBAA2B,CAACC,WAAD,EAAcV,OAAd,EAA0B;AAChEA,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,QAAMC,eAAeS,YAAYC,iBAAZ,EAArB;AACAX,YAAQC,YAAR,GAAuBA,YAAvB;AACA,WAAO,oCAAYA,YAAZ,EAA0B,8BAAgBD,OAAhB,CAA1B,CAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,EAAP;AACD;AACF,CAXM;;AAaA,IAAMU,8DAA2B,SAA3BA,wBAA2B,CACtCN,UADsC,EAEtCO,gBAFsC,EAGtCb,OAHsC,EAItCO,MAJsC,EAKnC;AACHP,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,WAAO,qBAAYc,iBAAZ,CACL,sCAAcR,UAAd,EAA0B,gCAAkBN,OAAlB,CAA1B,CADK,EAELa,gBAFK,CAAP;AAID,GALD,CAKE,OAAOX,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,qBAAYa,WAAZ,CAAwBF,gBAAxB,CAAP;AACD;AACF,CAjBM;;AAmBA,IAAMG,4DAA0B,SAA1BA,uBAA0B,cAAe;AACpD,SAAO,2BAAaN,YAAYC,iBAAZ,EAAb,CAAP;AACD,CAFM;;AAIA,IAAMM,4DAA0B,SAA1BA,uBAA0B,CAAClB,UAAD,EAAac,gBAAb,EAAkC;AACvE,MAAI;AACF,WAAO,qBAAYC,iBAAZ,CACL,6BAAef,UAAf,CADK,EAELc,gBAFK,CAAP;AAID,GALD,CAKE,OAAOX,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,qBAAYa,WAAZ,CAAwBF,gBAAxB,CAAP;AACD;AACF,CAVM","file":"index.js","sourcesContent":["import {\n  getToHTMLConfig,\n  getFromHTMLConfig,\n  defaultFontFamilies\n} from \"./configs\";\n\nimport { convertFromRaw, convertToRaw, EditorState } from \"draft-js\";\nimport { stateFromHTML } from \"draft-js-import-html\";\nimport { stateToHTML } from \"draft-js-export-html\";\n\nconst defaultConvertOptions = {\n  fontFamilies: defaultFontFamilies\n};\n\nexport const convertRawToHTML = (rawContent, options) => {\n  options = { ...defaultConvertOptions, ...options };\n\n  try {\n    const contentState = convertFromRaw(rawContent);\n    options.contentState = contentState;\n    // stateToHTML 方法 可传入自定义函数\n    // 传入的 具体方法属性 可看相应的定义\n    return stateToHTML(contentState, getToHTMLConfig(options));\n  } catch (error) {\n    console.warn(error);\n    return \"\";\n  }\n};\n\nexport const convertHTMLToRaw = (HTMLString, options, source) => {\n  options = { ...defaultConvertOptions, ...options };\n\n  try {\n    console.log(getFromHTMLConfig(options));\n\n    const contentState = stateFromHTML(HTMLString, getFromHTMLConfig(options));\n\n    return convertToRaw(contentState);\n  } catch (error) {\n    console.warn(error);\n    return {};\n  }\n};\n\nexport const convertEditorStateToHTML = (editorState, options) => {\n  options = { ...defaultConvertOptions, ...options };\n\n  try {\n    const contentState = editorState.getCurrentContent();\n    options.contentState = contentState;\n    return stateToHTML(contentState, getToHTMLConfig(options));\n  } catch (error) {\n    console.warn(error);\n    return \"\";\n  }\n};\n\nexport const convertHTMLToEditorState = (\n  HTMLString,\n  editorDecorators,\n  options,\n  source\n) => {\n  options = { ...defaultConvertOptions, ...options };\n\n  try {\n    return EditorState.createWithContent(\n      stateFromHTML(HTMLString, getFromHTMLConfig(options)),\n      editorDecorators\n    );\n  } catch (error) {\n    console.warn(error);\n    return EditorState.createEmpty(editorDecorators);\n  }\n};\n\nexport const convertEditorStateToRaw = editorState => {\n  return convertToRaw(editorState.getCurrentContent());\n};\n\nexport const convertRawToEditorState = (rawContent, editorDecorators) => {\n  try {\n    return EditorState.createWithContent(\n      convertFromRaw(rawContent),\n      editorDecorators\n    );\n  } catch (error) {\n    console.warn(error);\n    return EditorState.createEmpty(editorDecorators);\n  }\n};\n"]}