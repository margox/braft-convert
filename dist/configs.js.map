{"version":3,"sources":["../src/configs.js"],"names":["namedColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","getStyleValue","style","split","defaultUnitExportFn","unit","defaultUnitImportFn","replace","ignoredNodeAttributes","ignoredEntityNodeAttributes","spreadNodeAttributes","Object","keys","attributesObject","reduce","attributeString","attributeName","defaultFontFamilies","name","family","getHexColor","color","test","indexOf","rgbArray","convertedColor","length","map","hex","parseInt","x","toString","join","blocks","unstyled","blockquote","blockTypes","blockNames","key","convertAtomicBlock","block","contentState","blockNodeAttributes","contentBlock","getBlockForKey","className","class","nodeAttrAsProps","entityKey","getEntityAt","entity","getEntity","mediaType","getType","toLowerCase","data","float","alignment","getData","url","link","link_target","width","height","meta","imageWrapStyle","styledClassName","textAlign","display","__html","entityStyleFn","originalText","entityExportFn","options","entityType","type","customOutput","nodeAttributes","target","otherAttr","element","attributes","href","filterStyleValueEqual","valueName","console","log","filter","value","first","filterStyleValueStartsWith","startsWith","inlineStyleFn","unitExportFn","textDecoration","backgroundColor","fontSize","lineHeight","letterSpacing","fontFamily","fontFamilies","find","item","blockStyleFn","blockStyle","blockType","textIndent","isNaN","previousBlock","getBlockBefore","nextBlock","getBlockAfter","previousBlockType","nextBlockType","start","end","nest","customInlineFn","source","Style","Entity","node","nodeName","tagName","unitImportFn","customInput","newStyle","forEach","call","toUpperCase","parseFloat","alt","title","id","controls","autoplay","loop","poster","autoPlay","attr","querySelectorAll","getAttribute","parentNode","entityData","classList","contains","embedContent","innerHTML","outerHTML","customBlockFn","nodeStyle","blockData","Math","ceil","getToHTMLConfig","getFromHTMLConfig"],"mappings":"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","file":"configs.js","sourcesContent":["import React from \"react\";\n\nexport const namedColors = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\n\nconst getStyleValue = style => style.split(\"-\")[1];\nconst defaultUnitExportFn = unit => unit + \"px\";\nconst defaultUnitImportFn = unit => unit.replace(\"px\", \"\");\n\nconst ignoredNodeAttributes = [\"style\"];\nconst ignoredEntityNodeAttributes = [\n  \"style\",\n  \"href\",\n  \"target\",\n  \"alt\",\n  \"title\",\n  \"id\",\n  \"controls\",\n  \"autoplay\",\n  \"loop\",\n  \"poster\"\n];\n\nconst spreadNodeAttributes = attributesObject => {\n  return Object.keys(attributesObject)\n    .reduce((attributeString, attributeName) => {\n      return `${attributeString} ${attributeName}=\"${\n        attributesObject[attributeName]\n      }\"`;\n    }, \"\")\n    .replace(/^\\s$/, \"\");\n};\n\nexport const defaultFontFamilies = [\n  {\n    name: \"Araial\",\n    family: \"Arial, Helvetica, sans-serif\"\n  },\n  {\n    name: \"Georgia\",\n    family: \"Georgia, serif\"\n  },\n  {\n    name: \"Impact\",\n    family: \"Impact, serif\"\n  },\n  {\n    name: \"Monospace\",\n    family: '\"Courier New\", Courier, monospace'\n  },\n  {\n    name: \"Tahoma\",\n    family: \"tahoma, arial, 'Hiragino Sans GB', 宋体, sans-serif\"\n  }\n];\n\nexport const getHexColor = color => {\n  color = color\n    .replace(\"color:\", \"\")\n    .replace(\";\", \"\")\n    .replace(\" \", \"\");\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color;\n  } else if (namedColors[color]) {\n    return namedColors[color];\n  } else if (color.indexOf(\"rgb\") === 0) {\n    let rgbArray = color.split(\",\");\n    let convertedColor =\n      rgbArray.length < 3\n        ? null\n        : \"#\" +\n          [rgbArray[0], rgbArray[1], rgbArray[2]]\n            .map(x => {\n              const hex = parseInt(x.replace(/\\D/g, \"\"), 10).toString(16);\n              return hex.length === 1 ? \"0\" + hex : hex;\n            })\n            .join(\"\");\n\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor)\n      ? convertedColor\n      : null;\n  } else {\n    return null;\n  }\n};\n\nexport const blocks = {\n  \"header-one\": \"h1\",\n  \"header-two\": \"h2\",\n  \"header-three\": \"h3\",\n  \"header-four\": \"h4\",\n  \"header-five\": \"h5\",\n  \"header-six\": \"h6\",\n  unstyled: \"p\",\n  blockquote: \"blockquote\"\n};\n\nconst blockTypes = Object.keys(blocks);\nconst blockNames = blockTypes.map(key => blocks[key]);\n\nconst convertAtomicBlock = (block, contentState, blockNodeAttributes) => {\n  if (!block || !block.key) {\n    return <p />;\n  }\n\n  const contentBlock = contentState.getBlockForKey(block.key);\n\n  let { class: className, ...nodeAttrAsProps } = blockNodeAttributes;\n  nodeAttrAsProps.className = className;\n\n  if (!contentBlock) {\n    return <p />;\n  }\n\n  const entityKey = contentBlock.getEntityAt(0);\n\n  if (!entityKey) {\n    return <p />;\n  }\n\n  const entity = contentState.getEntity(entityKey);\n  const mediaType = entity.getType().toLowerCase();\n\n  let { float, alignment } = block.data;\n  let { url, link, link_target, width, height, meta } = entity.getData();\n\n  if (mediaType === \"image\") {\n    let imageWrapStyle = {};\n    let styledClassName = \"\";\n\n    if (float) {\n      imageWrapStyle.float = float;\n      styledClassName += \" float-\" + float;\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment;\n      styledClassName += \" align-\" + alignment;\n    }\n\n    if (link) {\n      return (\n        <div\n          className={\"media-wrap image-wrap\" + styledClassName}\n          style={imageWrapStyle}\n        >\n          <a\n            style={{ display: \"inline-block\" }}\n            href={link}\n            target={link_target}\n          >\n            <img\n              {...nodeAttrAsProps}\n              {...meta}\n              src={url}\n              width={width}\n              height={height}\n              style={{ width, height }}\n            />\n          </a>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={\"media-wrap image-wrap\" + styledClassName}\n          style={imageWrapStyle}\n        >\n          <img\n            {...nodeAttrAsProps}\n            {...meta}\n            src={url}\n            width={width}\n            height={height}\n            style={{ width, height }}\n          />\n        </div>\n      );\n    }\n  } else if (mediaType === \"audio\") {\n    return (\n      <div className=\"media-wrap audio-wrap\">\n        <audio controls {...nodeAttrAsProps} {...meta} src={url} />\n      </div>\n    );\n  } else if (mediaType === \"video\") {\n    return (\n      <div className=\"media-wrap video-wrap\">\n        <video\n          controls\n          {...nodeAttrAsProps}\n          {...meta}\n          src={url}\n          width={width}\n          height={height}\n        />\n      </div>\n    );\n  } else if (mediaType === \"embed\") {\n    return (\n      <div className=\"media-wrap embed-wrap\">\n        <div dangerouslySetInnerHTML={{ __html: url }} />\n      </div>\n    );\n  } else if (mediaType === \"hr\") {\n    return <hr />;\n  } else {\n    return <p />;\n  }\n};\n/**\n * https://www.npmjs.com/package/draft-js-export-html#entitystylefn\n * @param {*} options\n */\nconst entityStyleFn = options => (entity, originalText) => {\n  const { entityExportFn } = options;\n  const entityType = entity.type.toLowerCase();\n\n  if (entityExportFn) {\n    const customOutput = entityStyleFn(options, entity, originalText);\n    if (customOutput) {\n      return customOutput;\n    }\n  }\n\n  if (entityType === \"link\") {\n    let { class: className, ...nodeAttrAsProps } =\n      entity.data.nodeAttributes || {};\n    nodeAttrAsProps.className = className;\n    let { url, target, ...otherAttr } = entity.data;\n    return {\n      element: \"a\",\n      attributes: {\n        href: url,\n        target: target,\n        ...otherAttr\n      },\n      ...nodeAttrAsProps\n    };\n  }\n};\n/**\n * 根据相等 查找指定值的 Style\n * @param {OrderedSet} style Style OrderedSet\n * @param {string} valueName 要查找的值\n */\nconst filterStyleValueEqual = (style, valueName) => {\n  console.log(style);\n  console.log(typeof style);\n\n  return style\n    .filter(value => {\n      value = value.toLowerCase();\n      return value === valueName;\n    })\n    .first();\n};\n/**\n * 根据 startsWith 查找指定值的 Style\n * @param {OrderSet} style Style OrderedSet\n * @param {string} valueName 要查找的值\n */\nconst filterStyleValueStartsWith = (style, valueName) => {\n  return style\n    .filter(value => {\n      value = value.toLowerCase();\n      return value.startsWith(valueName);\n    })\n    .first();\n};\n/**\n * https://www.npmjs.com/package/draft-js-export-html#inlinestylesfn\n * @param {*} options\n */\nconst inlineStyleFn = options => style => {\n  const unitExportFn = options.unitExportFn || defaultUnitExportFn;\n\n  if (options.inlineStyleFn) {\n    const customOutput = options.inlineStyleFn(options, style);\n    if (customOutput) {\n      return customOutput;\n    }\n  }\n  let value = null;\n\n  value = filterStyleValueEqual(style, \"strikethrough\");\n  if (value) {\n    return {\n      element: \"span\",\n      style: {\n        textDecoration: \"line-through\"\n      }\n    };\n  }\n\n  value = filterStyleValueEqual(style, \"superscript\");\n  if (value) {\n    return {\n      element: \"sup\"\n    };\n  }\n\n  value = filterStyleValueEqual(style, \"subscript\");\n  if (value) {\n    return {\n      element: \"sub\"\n    };\n  }\n\n  value = filterStyleValueStartsWith(style, \"color-\");\n  if (value) {\n    console.log(\"color\", value);\n\n    return {\n      element: \"span\",\n      style: {\n        color: \"#\" + getStyleValue(value)\n      }\n    };\n  }\n\n  value = filterStyleValueStartsWith(style, \"bgcolor-\");\n  if (value) {\n    return {\n      element: \"span\",\n      style: {\n        backgroundColor: \"#\" + getStyleValue(value)\n      }\n    };\n  }\n\n  value = filterStyleValueStartsWith(style, \"fontsize-\");\n  if (value) {\n    return {\n      element: \"span\",\n      style: {\n        fontSize: unitExportFn(getStyleValue(value), \"font-size\", \"html\")\n      }\n    };\n  }\n\n  value = filterStyleValueStartsWith(style, \"lineheight-\");\n  if (value) {\n    return {\n      element: \"span\",\n      style: {\n        lineHeight: unitExportFn(getStyleValue(value), \"line-height\", \"html\")\n      }\n    };\n  }\n  value = filterStyleValueStartsWith(style, \"letterspacing-\");\n  if (value) {\n    return {\n      element: \"span\",\n      style: {\n        letterSpacing: unitExportFn(\n          getStyleValue(value),\n          \"letter-spacing\",\n          \"html\"\n        )\n      }\n    };\n  }\n  value = filterStyleValueStartsWith(style, \"fontfamily-\");\n  if (value) {\n    let fontFamily = options.fontFamilies.find(\n      item => item.name.toLowerCase() === getStyleValue(value)\n    );\n    if (!fontFamily) return {};\n    return {\n      element: \"span\",\n      style: {\n        fontFamily: fontFamily.family\n      }\n    };\n  }\n};\n/**\n * https://www.npmjs.com/package/draft-js-export-html#blockstylefn\n * @param {*} options\n */\nconst blockStyleFn = options => block => {\n  const { blockStyleFn, contentState } = options;\n\n  if (blockStyleFn) {\n    const customOutput = blockStyleFn(contentState, block);\n    if (customOutput) {\n      return customOutput;\n    }\n  }\n\n  let blockStyle = \"\";\n\n  const blockType = block.type.toLowerCase();\n\n  const { textAlign, textIndent, nodeAttributes = {} } = block.data;\n  const attributeString = spreadNodeAttributes(nodeAttributes);\n\n  if (textAlign || textIndent) {\n    blockStyle = ' style=\"';\n\n    if (textAlign) {\n      blockStyle += `text-align:${textAlign};`;\n    }\n\n    if (textIndent && !isNaN(textIndent) && textIndent > 0) {\n      blockStyle += `text-indent:${textIndent * 2}em;`;\n    }\n\n    blockStyle += '\"';\n  }\n\n  if (blockType === \"atomic\") {\n    return convertAtomicBlock(block, contentState, nodeAttributes);\n  } else if (blockType === \"code-block\") {\n    const previousBlock = contentState.getBlockBefore(block.key);\n    const nextBlock = contentState.getBlockAfter(block.key);\n    const previousBlockType = previousBlock && previousBlock.getType();\n    const nextBlockType = nextBlock && nextBlock.getType();\n\n    let start = \"\";\n    let end = \"\";\n\n    if (previousBlockType !== \"code-block\") {\n      start = `<pre${attributeString}><code>`;\n    } else {\n      start = \"\";\n    }\n\n    if (nextBlockType !== \"code-block\") {\n      end = \"</code></pre>\";\n    } else {\n      end = \"<br/>\";\n    }\n\n    return { start, end };\n  } else if (blocks[blockType]) {\n    return {\n      start: `<${blocks[blockType]}${blockStyle}${attributeString}>`,\n      end: `</${blocks[blockType]}>`\n    };\n  } else if (blockType === \"unordered-list-item\") {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: \"</li>\",\n      nest: <ul />\n    };\n  } else if (blockType === \"ordered-list-item\") {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: \"</li>\",\n      nest: <ol />\n    };\n  }\n};\n\n/**\n * https://github.com/sstur/draft-js-utils/tree/master/packages/draft-js-import-element#options\n * @param {*} options\n */\nconst customInlineFn = (options, source) => (element, { Style, Entity }) => {\n  let node = element;\n  let nodeName = element.tagName.toLowerCase();\n  const unitImportFn = options.unitImportFn || defaultUnitImportFn;\n\n  if (options && options.customInlineFn) {\n    const customInput = options.customInlineFn(options, source, element, {\n      Style,\n      Entity\n    });\n    if (customInput) {\n      return customInput;\n    }\n  }\n\n  let newStyle = null;\n  [].forEach.call(node.style, style => {\n    if (nodeName === \"span\" && style === \"color\") {\n      let color = getHexColor(node.style.color);\n      newStyle = color\n        ? Style(\"COLOR-\" + color.replace(\"#\", \"\").toUpperCase())\n        : null;\n    } else if (nodeName === \"span\" && style === \"background-color\") {\n      let color = getHexColor(node.style.backgroundColor);\n      newStyle = color\n        ? Style(\"BGCOLOR-\" + color.replace(\"#\", \"\").toUpperCase())\n        : null;\n    } else if (nodeName === \"span\" && style === \"font-size\") {\n      newStyle = Style(\n        \"FONTSIZE-\" + unitImportFn(node.style.fontSize, \"font-size\", source)\n      );\n    } else if (\n      nodeName === \"span\" &&\n      style === \"line-height\" &&\n      !isNaN(parseFloat(node.style.lineHeight, 10))\n    ) {\n      newStyle = Style(\n        \"LINEHEIGHT-\" +\n          unitImportFn(node.style.lineHeight, \"line-height\", source)\n      );\n    } else if (\n      nodeName === \"span\" &&\n      style === \"letter-spacing\" &&\n      !isNaN(parseFloat(node.style.letterSpacing, 10))\n    ) {\n      newStyle = Style(\n        \"LETTERSPACING-\" +\n          unitImportFn(node.style.letterSpacing, \"letter-spacing\", source)\n      );\n    } else if (nodeName === \"span\" && style === \"text-decoration\") {\n      if (node.style.textDecoration === \"line-through\") {\n        newStyle = Style(\"STRIKETHROUGH\");\n      } else if (node.style.textDecoration === \"underline\") {\n        newStyle = Style(\"UNDERLINE\");\n      }\n    } else if (nodeName === \"span\" && style === \"font-family\") {\n      let fontFamily = options.fontFamilies.find(\n        item =>\n          item.family.toLowerCase() === node.style.fontFamily.toLowerCase()\n      );\n      if (!fontFamily) return;\n      newStyle = Style(\"FONTFAMILY-\" + fontFamily.name.toUpperCase());\n    }\n  });\n  if (!!newStyle) {\n    return newStyle;\n  }\n  if (nodeName === \"sup\") {\n    return Style(\"SUPERSCRIPT\");\n  } else if (nodeName === \"sub\") {\n    return Style(\"SUBSCRIPT\");\n  }\n\n  const { alt, title, id, controls, autoplay, loop, poster } = node;\n  let meta = {};\n  let nodeAttributes = {};\n\n  id && (meta.id = id);\n  alt && (meta.alt = alt);\n  title && (meta.title = title);\n  controls && (meta.controls = controls);\n  autoplay && (meta.autoPlay = autoplay);\n  loop && (meta.loop = loop);\n  poster && (meta.poster = poster);\n\n  node.attributes &&\n    Object.keys(node.attributes).forEach(key => {\n      let attr = node.attributes[key];\n      ignoredEntityNodeAttributes.indexOf(attr.name) === -1 &&\n        (nodeAttributes[attr.name] = attr.value);\n    });\n\n  if (nodeName === \"a\" && !node.querySelectorAll(\"img\").length) {\n    let href = node.getAttribute(\"href\");\n    let target = node.getAttribute(\"target\");\n    return Entity(\"LINK\", { href, target, nodeAttributes }, \"MUTABLE\");\n  } else if (nodeName === \"audio\") {\n    return Entity(\n      \"AUDIO\",\n      { url: node.getAttribute(\"src\"), meta, nodeAttributes },\n      \"IMMUTABLE\"\n    );\n  } else if (nodeName === \"video\") {\n    return Entity(\n      \"VIDEO\",\n      { url: node.getAttribute(\"src\"), meta, nodeAttributes },\n      \"IMMUTABLE\"\n    );\n  } else if (nodeName === \"img\") {\n    let parentNode = node.parentNode;\n    let entityData = { meta };\n    let { width, height } = node.style;\n\n    entityData.url = node.getAttribute(\"src\");\n    width && (entityData.width = width);\n    height && (entityData.height = height);\n\n    if (parentNode.nodeName.toLowerCase() === \"a\") {\n      entityData.link = parentNode.getAttribute(\"href\");\n      entityData.link_target = parentNode.getAttribute(\"target\");\n    }\n\n    return Entity(\"IMAGE\", entityData, \"IMMUTABLE\");\n  } else if (nodeName === \"hr\") {\n    return Entity(\"HR\", {}, \"IMMUTABLE\");\n  } else if (\n    node.parentNode &&\n    node.parentNode.classList.contains(\"embed-wrap\")\n  ) {\n    const embedContent = node.innerHTML || node.outerHTML;\n\n    if (embedContent) {\n      return Entity(\n        \"EMBED\",\n        {\n          url: embedContent\n        },\n        \"IMMUTABLE\"\n      );\n    }\n  }\n  return null;\n};\n/**\n * https://github.com/sstur/draft-js-utils/tree/master/packages/draft-js-import-element#options\n * @param {*} options\n */\nconst customBlockFn = options => element => {\n  let node = element;\n  let nodeName = element.tagName;\n\n  if (options && options.customBlockFn) {\n    const customInput = options.customBlockFn(options, element);\n    if (customInput) {\n      return customInput;\n    }\n  }\n\n  let nodeAttributes = {};\n  let nodeStyle = node.style || {};\n\n  node.attributes &&\n    Object.keys(node.attributes).forEach(key => {\n      let attr = node.attributes[key];\n      ignoredNodeAttributes.indexOf(attr.name) === -1 &&\n        (nodeAttributes[attr.name] = attr.value);\n    });\n\n  if (node.classList && node.classList.contains(\"media-wrap\")) {\n    return {\n      type: \"atomic\",\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    };\n  } else if (nodeName === \"img\") {\n    return {\n      type: \"atomic\",\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    };\n  } else if (nodeName === \"hr\") {\n    return {\n      type: \"atomic\",\n      data: { nodeAttributes }\n    };\n  } else if (nodeName === \"pre\") {\n    node.innerHTML = node.innerHTML\n      .replace(/<code(.*?)>/g, \"\")\n      .replace(/<\\/code>/g, \"\");\n\n    return {\n      type: \"code-block\",\n      data: { nodeAttributes }\n    };\n  } else if (blockNames.indexOf(nodeName) !== -1) {\n    const blockData = { nodeAttributes };\n\n    if (nodeStyle.textAlign) {\n      blockData.textAlign = nodeStyle.textAlign;\n    }\n\n    if (nodeStyle.textIndent) {\n      blockData.textIndent = /^\\d+em$/.test(nodeStyle.textIndent)\n        ? Math.ceil(parseInt(nodeStyle.textIndent, 10) / 2)\n        : 1;\n    }\n\n    return {\n      type: blockTypes[blockNames.indexOf(nodeName)],\n      data: blockData\n    };\n  }\n};\n\nexport const getToHTMLConfig = options => {\n  return {\n    inlineStyleFn: inlineStyleFn(options),\n    entityStyleFn: entityStyleFn(options),\n    blockStyleFn: blockStyleFn(options)\n  };\n};\n\nexport const getFromHTMLConfig = (options, source = \"unknow\") => {\n  return {\n    customInlineFn: customInlineFn(options, source),\n    customBlockFn: customBlockFn(options, source)\n  };\n};\n"]}